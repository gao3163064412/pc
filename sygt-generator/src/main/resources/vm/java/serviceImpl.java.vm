package ${packageName}.service.impl;

import java.util.List;
#foreach ($column in $columns)
#if($column.javaField == 'createTime' || $column.javaField == 'updateTime')
import com.sygt.common.utils.DateUtils;
#break
#end
#end
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.sygt.common.utils.StringUtils;
import org.apache.commons.lang3.ObjectUtils;
import com.sygt.common.constant.Constants;
#if($table.sub)
import java.util.ArrayList;

import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${subClassName};
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImpl<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service
{

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField})
    {
        return this.baseMapper.select${ClassName}ById(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className})
    {
        return this.baseMapper.select${ClassName}List(${className});
    }

    /**
     * 根据QueryWrapper查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @return ${functionName}集合
     */
    @Override
    public List<${ClassName}> ${ClassName}List(${ClassName} ${className})
    {
        QueryWrapper<${ClassName}> queryWrapper = queryWrapper(${className});
        return this.baseMapper.selectList(queryWrapper);
    }

    /**
     * 设置QueryWrapper 查询条件
     *
     * @param ${className} ${functionName}
     * @return ${functionName}集合
     */
    private QueryWrapper<${ClassName}> queryWrapper(${ClassName} ${className}) {

        String  searchValue = ${className}.getSearchValue();

        QueryWrapper<${ClassName}> queryWrapper = new QueryWrapper<${ClassName}>();


        #foreach($column in $columns)
            #set($queryType=$column.queryType)
            #set($javaField=$column.javaField)
            #set($javaType=$column.javaType)
            #set($columnName=$column.columnName)
            #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
            #if($column.query)
                #if($column.queryType == "EQ")
                    queryWrapper.eq(ObjectUtils.isNotEmpty(${className}.get$AttrName()),"$columnName",${className}.get$AttrName());
                #elseif($queryType == "NE")
                    queryWrapper.ne(ObjectUtils.isNotEmpty(${className}.get$AttrName()),"$columnName",${className}.get$AttrName());
                #elseif($queryType == "GT")
                    queryWrapper.gt(ObjectUtils.isNotEmpty(${className}.get$AttrName()),"$columnName",${className}.get$AttrName());
                #elseif($queryType == "GTE")
                    queryWrapper.ge(ObjectUtils.isNotEmpty(${className}.get$AttrName()),"$columnName",${className}.get$AttrName());
                #elseif($queryType == "LT")
                    queryWrapper.lt(ObjectUtils.isNotEmpty(${className}.get$AttrName()),"$columnName",${className}.get$AttrName());
                #elseif($queryType == "LTE")
                    queryWrapper.le(ObjectUtils.isNotEmpty(${className}.get$AttrName()),"$columnName",${className}.get$AttrName());
                #elseif($queryType == "LIKE")
                    queryWrapper.like(ObjectUtils.isNotEmpty(${className}.get$AttrName()),"$columnName",${className}.get$AttrName());
                #end
            #end
        #end

        queryWrapper.eq("del_flag", Constants.DEL_FLAG)
                .and(StringUtils.isNotBlank(searchValue),
                        c -> c.like( "*", searchValue).or().like("*", searchValue))
                .orderByDesc("create_time");

        return queryWrapper;

    }


    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int insert${ClassName}(${ClassName} ${className})
    {
#foreach ($column in $columns)
#if($column.javaField == 'createTime')
        ${className}.setCreateTime(DateUtils.getNowDate());
#end
#end
#if($table.sub)
        int rows = this.baseMapper.insert${ClassName}(${className});
        insert${subClassName}(${className});
        return rows;
#else
        return this.baseMapper.insert${ClassName}(${className});
#end
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int update${ClassName}(${ClassName} ${className})
    {
#foreach ($column in $columns)
#if($column.javaField == 'updateTime')
        ${className}.setUpdateTime(DateUtils.getNowDate());
#end
#end
#if($table.sub)
    this.baseMapper.delete${subClassName}By${subTableFkClassName}(${className}.get${pkColumn.capJavaField}());
        insert${subClassName}(${className});
#end
        return this.baseMapper.update${ClassName}(${className});
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}ID
     * @return 结果
     */
#if($table.sub)
    @Transactional
#end
    @Override
    public int delete${ClassName}ByIds(${pkColumn.javaType}[] ${pkColumn.javaField}s)
    {
#if($table.sub)
    this.baseMapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);
#end
        return this.baseMapper.delete${ClassName}ByIds(${pkColumn.javaField}s);
    }

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果
     */
    @Override
    public int delete${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField})
    {
#if($table.sub)
    this.baseMapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
#end
        return this.baseMapper.delete${ClassName}ById(${pkColumn.javaField});
    }
#if($table.sub)

    /**
     * 新增${subTable.functionName}信息
     *
     * @param ${className} ${functionName}对象
     */
    public void insert${subClassName}(${ClassName} ${className})
    {
        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
        Long ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
        if (StringUtils.isNotNull(${subclassName}List))
        {
            List<${subClassName}> list = new ArrayList<${subClassName}>();
            for (${subClassName} ${subclassName} : ${subclassName}List)
            {
                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                list.add(${subclassName});
            }
            if (list.size() > 0)
            {
                this.baseMapper.batch${subClassName}(list);
            }
        }
    }
#end
}
